{-# STDLIB_VERSION 2 #-}
{-# CONTENT_TYPE EXPRESSION #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "NONE";
let VOTERS = 3
let QUORUM = 2

let FEATURED = "featured"
let DELISTED = "delisted"

let VOTING = "voting"
let REVEAL = "reveal"

func getStringByKey(key:String)={...
}

func getIntegerByKey(key:String)= {...
}

func getKeyItem(supplier:String,title:String)={
    let supplierTitle = supplier + title
    "item_" + supplierTitle.toBytes().sha256().toBase58String()
}
func getKeyItemSupplier(item:String) = item + "_owner";
func getKeyItemPrice(item:String)= item + "_price";
func getKeyItemData(item:String) = item + "_data";

#storing the hash from the user
func getKeyCommit(item:String, user:String)= item + "_" + user + "_commit";
#commits count
func getKeyCommitsCount(item:String )= item + "_cmtcnt";
#store every reveal value for every count to allow vote validation after the voting process
func getKeyReveal(item:String, user:String)=item + "_" + user + "_reveal";
func getKeyItemStatus(item:String) = item + "_status";
func getKeyVotesCount(item:String, vote:String) = item + "_res:" + vote

func getValueItemSupplier(account:String)={
    getStringByKey(getKeyItemSupplier(account))
}
func getKeyUserItemCounter(user:String, item:String)= {
    item + "_" + user + "_cnt"
}
func getKeyBalanceSupplier(account:String)={
    account + "_balance"
}

func getValueBalanceSupplier(account:String)={
    let supplierBalanceKey = getKeyBalanceSupplier(account)
    match getInteger(this, supplierBalanceKey){
      case a:Int=>a
      case _=> 0
    }
}

func getValueUserItemsCounter(user:String, item:String)={
    let userItemCounterKey = getKeyUserItemCounter(user,item)
    match getInteger(this,userItemCounterKey){
        case a:Int=>a
        case _=>0
    }
}
func getValueItemPrice(item:String)={
    let keyItemPrice = getKeyItemPrice(item)
    getIntegerValue(this, keyItemPrice)
}

func getValueCommit(item:String, user:String)=getStringByKey(getKeyCommit(item, user))
func getValueCommitsCount(item:String) = getIntegerByKey(getKeyCommitsCount(item))
func getValueReveal(item:String, user:String) = getStringByKey(getKeyReveal(item, user))
func getValueItemStatus(item:String)=getStringByKey(getKeyItemStatus(item))
func getValueVotesCount(item:String, vote:String)=getIntegerByKey(getKeyVotesCount(item, vote))


@Callable(i)
func addItem(title:String, price:Int, data:String)= {
    let supplierAddress = toBase58String(i.caller.bytes)
    let item = getKeyItem(supplierAddress, Title)
    if (price <= 0) then throw ("Purchase amount cannot be less than item price")
    else if (getValueItemSupplier(item) != NONE) then throw ("An item already exists")
    else {
      WriteSet([
          DataEntry(getKeyItemSupplier(item), supplierAddress)
          DataEntry(getKeyItemPrice(item), price)
          DataEntry(getKeyItemData(item), data)
      ])
    }

}
@Callable(i)
func voteCommit(item:String, hash:String)={
    let user = i.caller.bytes.toBase58String()
    let commitsCount = getValueCommitsCount(item)
    let status = getValueItemsStatus(item)
    if (commitsCount >= VOTERS) then throw("Reached Max number of voters")
    else if (getValueCommit(item,user)!= NONE) then throw("You voted already")
    else if (getKeyItemSupplier(item)==NONE) then throw ("Item does not exist")
    else if (status != NONE && status != VOTING) then throw ("Voting is not active for this item now")
    else {
      let newStatus = if(commitsCount == VOTERS) then REVEAL else VOTING
      WriteSet([
          DataEntry(getKeyCommit(item, user), hash)
          DataEntry(getKeyCommitsCount(item), commitsCount + 1)
          DataEntry(getKeyItemStatus(item), newStatus)
      ])
    }
}
@Callable(i)
func voteReveal(item:String, vote:String, salt:String)={
    let user = i.caller.bytes.toBase58String()
    let status = getValueItemsStatus(item)
    let newVotesCount = getValueVotesCount(item, vote) + 1
    let saltedVote = item + vote +salt
    if (saltedVote >= toBytes().sha256().toBase58String() != getValueCommit(item, user)) then throw("Reveal data is not valid")
    else if (getValueCommitsCount(item)< VOTERS) then throw("You voted already")
    else if (status != REVEAL && status != VOTING) then throw ("Voting is not active for this item now")
    else if (vote != FEATURED && vote != DELISTED) then throw ("Provided voting option is incorrect")
    else {
      let newStatus = if(newVotesCount >= QUORUM) then vote else REVEAL
      WriteSet([
          DataEntry(getKeyCommit(item, user), hash)
          DataEntry(getKeyCommitsCount(item), commitsCount + 1)
          DataEntry(getKeyItemStatus(item), newStatus)
      ])
    }
}